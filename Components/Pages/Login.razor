@page "/login"
@using Excellentiam.DTOs
@using Excellentiam.Models
@using Excellentiam.Service.Interface
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject IAutenticacionService AutenticacionService

<PageTitle>Iniciar Sesión</PageTitle>

<div class="d-flex justify-content-center mt-5">
    <div class="card shadow" style="width: 100%; max-width: 400px;">
        <div class="card-header text-center">
            <h4>Iniciar Sesión</h4>
        </div>
        <div class="card-body">
            <EditForm Model="usuario" OnSubmit="HandleLogin">
                <DataAnnotationsValidator />

                <div class="mb-3">
                    <label for="email">Correo electrónico</label>
                    <InputText id="email" 
                               class="form-control" 
                               @bind-Value="usuario.Correo"
                               placeholder="tu@correo.com" />
                    <ValidationMessage For="() => usuario.Correo" />

                </div>

                <div class="mb-3">
                    <label for="password">Contraseña</label>
                    <input id="password" 
                               class="form-control" 
                               type="password"
                               @bind-value="usuario.Contraseña"
                               placeholder="••••••••" />
                    <ValidationMessage For="() => usuario.Contraseña" />
                </div>

                <div class="d-grid">
                    <button type="submit" 
                            class="btn btn-primary" 
                            disabled="@_processing">
                        @(_processing ? "Iniciando..." : "Iniciar Sesión")
                    </button>
                </div>
            </EditForm>

            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="alert alert-danger p-2" role="alert">
                    @ErrorMessage
                </div>
            }

            <div class="mt-3 text-center">
                <small>
                    ¿No tienes cuenta? 
                    <a href="/register" class="text-decoration-none">Regístrate aquí</a>
                </small>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginDTO usuario = new();
    private string? ErrorMessage;
    private bool _processing = false;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Autenticacion();
    }

    private async Task HandleLogin()
    {
        if (_processing) return;

        _processing = true;
        ErrorMessage = null;
        StateHasChanged();

        try
        {
            var respuesta = await AutenticacionService.LoginAsync(usuario);
            if (respuesta)
            {
                var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
                await customAuthStateProvider.NotifyUserAuthentication();
                Navigation.NavigateTo("/", forceLoad: true);
            }
            else
            {
                ErrorMessage = "Credenciales invalidas.";
            }

        }
        catch (Exception ex)
        {
            ErrorMessage = "Error de conexión. Inténtalo más tarde.";
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            _processing = false;
            StateHasChanged();
        }
    }
    private async Task Autenticacion()
    {
        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        if (auth.User.Identity.IsAuthenticated)
        {
            Navigation.NavigateTo("/");
        }
    }
}